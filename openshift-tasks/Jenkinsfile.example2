#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml -B "
    def jenkinsProject = "${GUID}-jenkins"
    def devProject = "${GUID}-tasks-dev"
    def prodProject = "${GUID}-tasks-prod"

    // Checkout Source Code.
    stage('Checkout Source') {
      git url: "${REPO}", branch: 'master'
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = "${version}-${currentBuild.number}"
      // Set the tag for the production image: version
      def prodTag = "${version}"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        sh "${mvnCmd} clean install -DskipTests=true"
      }

      // TBD: The next two stages should run in parallel
      stage('Unit Tests/Code Analysis') {
        parallel (
          // Using Maven run the unit tests
          'unit-tests': {
              echo "Running Unit Tests"

              sh "${mvnCmd} test"
          },

          // Using Maven to call SonarQube for Code Analysis
          'code-analysis': {
              echo "Running Code Analysis"

              sh "${mvnCmd} sonar:sonar -DskipTests=true -Dsonar.host.url=${SONAR_URL}"
          }
        )
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${NEXUS_RELEASE_URL}"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        script {
            openshift.withCluster() {
                openshift.withProject("${devProject}") {
                    openshift.selector("bc", "tasks").startBuild("--from-file=./target/openshift-tasks.war", "--wait=true")
                    openshift.tag("tasks:latest", "tasks:${devTag}")
                }
            }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // TBD: Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding
        
        script {
            openshift.withCluster() {
                openshift.withProject("${devProject}") {
                    openshift.set("image", "dc/tasks", "tasks=docker-registry.default.svc:5000/${devProject}/tasks:${devTag}")
                    openshift.set("env", "dc/tasks", "VERSION='${devTag} tasks-dev'")
                    openshift.selector("dc", "tasks").rollout().latest();
                    waitForDeploymentHavingAllReplicasReady("tasks", 40)
                } 
            }
        }
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"
        sh "skopeo copy \
              --src-tls-verify=false \
              --dest-tls-verify=false \
              --src-creds openshift:\$(oc whoami -t) \
              --dest-creds admin:redhat \
              docker://docker-registry.default.svc.cluster.local:5000/${devProject}/tasks:${devTag} \
              docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"                

        script {
            // TBD: Tag the built image with the production tag.
            openshift.withCluster() {
                openshift.withProject("${devProject}") {
                    openshift.tag("${devProject}/tasks:${devTag}", "${devProject}/tasks:${prodTag}")
                }
            }
        }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        openshift.withCluster() {
          openshift.withProject("${prodProject}") {
            
              // Set Version
              openshift.set("env", "dc/tasks-blue", "VERSION='${prodTag} tasks-blue'")
              openshift.set("env", "dc/tasks-green", "VERSION='${prodTag} tasks-green'")

              activeApp = openshift.selector("route", "tasks").object().spec.to.name
              if (activeApp == "tasks-green") {
                  destApp = "tasks-blue"
              }
              echo "Active Application:      " + activeApp
              echo "Destination Application: " + destApp

              // Update the Image on the Production Deployment Config
              def dc = openshift.selector("dc/${destApp}").object()
              dc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${devProject}/tasks:${prodTag}"
              openshift.apply(dc)    
              openshift.selector("dc", "${destApp}").rollout().latest();

              // Wait for application to be deployed
              waitForDeploymentHavingAllReplicasReady("${destApp}", 40)
          }
        }
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        script {
            openshift.withCluster() {
                    openshift.withProject("${prodProject}") {
                    openshift.set("route-backends", "tasks", "${destApp}=100", "${activeApp}=0")
                    }
                }                    
            }
        }
      }
    }
  }

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}

def waitForDeploymentHavingAllReplicasReady(dc, maxTries) {
    echo "Waiting for DeploymentConfig '${dc}' to have all ReplicationControllers ready"
    def dc_version =  openshift.selector("dc", "${dc}").object().status.latestVersion
    def rc_name = "${dc}-${dc_version}"
    def rc_prod = openshift.selector("rc", rc_name).object()
    def count = 0
    while (rc_prod.spec.replicas != rc_prod.status.readyReplicas && count < maxTries) {
        count++
        sleep 5
        rc_prod = openshift.selector("rc", rc_name).object()
    }
}
